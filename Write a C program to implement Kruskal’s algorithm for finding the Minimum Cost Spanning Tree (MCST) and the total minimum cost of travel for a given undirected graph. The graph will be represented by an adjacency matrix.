#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define INF 9999

typedef struct {
    int u, v, w;
} Edge;

typedef struct {
    int parent;
    int rank;
} Subset;

// Updated comparator with tie-breaking
int compareEdges(const void *a, const void *b) {
    Edge *e1 = (Edge *)a;
    Edge *e2 = (Edge *)b;
    if (e1->w != e2->w) return e1->w - e2->w;
    if (e1->u != e2->u) return e1->u - e2->u;
    return e1->v - e2->v;
}

int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

void kruskalMST(int **cost, int V) {
    Edge edges[100];
    int e = 0;

    for (int i = 0; i < V; i++) {
        for (int j = i + 1; j < V; j++) {
            if (cost[i][j] != INF) {
                edges[e].u = i;
                edges[e].v = j;
                edges[e].w = cost[i][j];
                e++;
            }
        }
    }

    qsort(edges, e, sizeof(Edge), compareEdges);

    Subset *subsets = (Subset *)malloc(V * sizeof(Subset));
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    int edgeCount = 0;
    int minCost = 0;

    for (int i = 0; i < e && edgeCount < V - 1; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;

        int setU = find(subsets, u);
        int setV = find(subsets, v);

        if (setU != setV) {
            printf("Edge %d:(%d, %d) cost:%d\n", edgeCount, u, v, w);
            minCost += w;
            Union(subsets, setU, setV);
            edgeCount++;
        }
    }

    printf("Minimum cost= %d\n", minCost);

    free(subsets);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
